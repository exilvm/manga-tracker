import { ConfirmProvider, useConfirm } from 'material-ui-confirm';
import React, { useCallback, useEffect, useState } from 'react';
import { useSortBy, useTable, usePagination } from 'react-table';
import {
  Table,
  TableBody,
  TableCell,
  TableHead,
  TableRow,
  TableSortLabel,
  TablePagination,
  CircularProgress,
} from '@material-ui/core';
import { makeStyles, darken } from '@material-ui/core/styles';
import PropTypes from 'prop-types';

import TablePaginationActions from './TablePaginationActions';
import { TableToolbar } from './TableToolbar';
import { useEditable } from './useEditable';

const useStyles = makeStyles((theme) => ({
  editCell: {
    display: 'flex',
    justifyContent: 'center',
  },
  tableHead: {
    backgroundColor: darken(theme.palette.background.paper, 0.1),
  },
  pagination: {
    display: 'flex',
    justifyContent: 'flex-end',
    alignItems: 'center',
  },
}));

/**
 * Renders a table with data generated by react-table with custom hooks
 */
const MaterialTable = (props) => {
  const {
    title,
    columns,
    data,
    sortable = false,
    editable = false,
    deletable = false,
    creatable = false,
    pagination = false,
    rowsPerPage: rowsPerPageInitial = 25,
    onSaveRow,
    onDeleteRow,
    id,
    fetchData,
    rowCount = 0,
    loading = false,
    CreateDialog,
    toolbarProps,
  } = props;

  if (data === null || data === undefined) {
    throw new TypeError('Data not given to table');
  }

  const classes = useStyles();
  const [rowsPerPage] = useState(rowsPerPageInitial);
  const confirm = useConfirm();

  const {
    getTableProps,
    getTableBodyProps,
    headerGroups,
    rows,
    tableSize,
    prepareRow,
    setPageSize,
    gotoPage,
    state: { pageIndex, pageSize },
  } = useTable({
    columns,
    data,
    disableSortBy: !sortable,
    disableDeleting: !deletable,
    disableEditing: !editable,
    disableCreating: !creatable,
    classes,
    onSaveRow,
    onDeleteRow,
    confirm,
    initialState: {
      pageSize: rowsPerPage,
    },
    manualPagination: true,
    pageCount: -1, // This is handled by the TablePagination component
    autoResetPage: false,
  },
  useSortBy,
  useEditable,
  usePagination);

  useEffect(() => {
    if (typeof fetchData !== 'function') return;

    fetchData(pageIndex, pageSize);
  }, [fetchData, pageIndex, pageSize]);

  const onChangePage = useCallback((e, page) => {
    gotoPage(page);
  }, [gotoPage]);
  const onChangePageSize = useCallback((e) => setPageSize(e.target.value), [setPageSize]);
  const labelDisplayedRows = useCallback(
    ({ page }) => `Page ${page+1} of ${Math.ceil(rowCount/pageSize)}`, [pageSize, rowCount]
  );

  return (
    <div id={id}>
      <TableToolbar
        title={title}
        DialogComponent={CreateDialog}
        creatable={creatable}
        {...toolbarProps}
      />
      <Table
        size={tableSize}
        aria-label={title}
        {...getTableProps()}
      >
        <TableHead className={classes.tableHead}>
          {headerGroups.map(headerGroup => (
            <TableRow {...headerGroup.getHeaderGroupProps()}>
              {headerGroup.headers.map(col => (
                <TableCell
                  {...col.getHeaderProps(col.getSortByToggleProps({ width: col.widthSuggestion }))}
                >
                  {col.canSort ? (
                    <TableSortLabel
                      active={col.isSorted}
                      direction={col.isSortedDesc ? 'desc' : 'asc'}
                      hideSortIcon={!sortable}
                    >
                      {col.render('Header')}
                    </TableSortLabel>
                  ) : col.render('Header')}
                </TableCell>
              ))}
            </TableRow>
          ))}
        </TableHead>
        <TableBody {...getTableBodyProps()}>
          {rows.map(row => {
            prepareRow(row);
            return (
              <TableRow {...row.getRowProps()}>
                {row.cells.map(cell => (
                  <TableCell
                    padding={cell.column.padding}
                    {...cell.getCellProps()}
                  >
                    {cell.render('Cell')}
                  </TableCell>
                ))}
              </TableRow>
            );
          })}
        </TableBody>
      </Table>
      {pagination && (
        <div className={classes.pagination}>
          {loading && <CircularProgress size={30} />}
          <TablePagination
            component='div'
            count={rowCount}
            page={pageIndex}
            rowsPerPage={pageSize}
            onChangePage={onChangePage}
            onChangeRowsPerPage={onChangePageSize}
            ActionsComponent={TablePaginationActions}
            labelDisplayedRows={labelDisplayedRows}
          />
        </div>
      )}
    </div>
  );
};

const propTypes = {
  title: PropTypes.string,
  data: PropTypes.arrayOf(PropTypes.object).isRequired,
  columns: PropTypes.arrayOf(PropTypes.object).isRequired,
  sortable: PropTypes.bool,
  editable: PropTypes.bool,
  deletable: PropTypes.bool,
  creatable: PropTypes.bool,
  pagination: PropTypes.bool,
  rowsPerPage: PropTypes.number,
  onSaveRow: PropTypes.func,
  onDeleteRow: PropTypes.func,
  id: PropTypes.string,
  fetchData: PropTypes.func,
  rowCount: PropTypes.number,
  loading: PropTypes.bool,
  CreateDialog: PropTypes.func,
  toolbarProps: PropTypes.object,
};

const MaterialTableWrapper = (props) => (
  <ConfirmProvider>
    <MaterialTable {...props} />
  </ConfirmProvider>
);

MaterialTableWrapper.propTypes = propTypes;
MaterialTable.propTypes = propTypes;

export { MaterialTableWrapper as MaterialTable };
